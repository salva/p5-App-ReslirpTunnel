#!/usr/bin/perl

use strict;
use warnings;
use Getopt::Long qw(GetOptions);
use App::SlirpTunnel;

my $remote_port;
my $remote_user;
my $remote_os;
my $remote_shell;
my $ssh_command;
my @more_ssh_args;
my $slirp_command;
my @more_slirp_args;

my $remote_network;
my $remote_netmask;
my $remote_dns = '3';
my $remote_gw = '2';
my $local_ip = '30';
my $device;
my @route_hosts_local;
my @route_hosts_dns;
my @route_hosts_ssh;
my $log_to_stderr;
my $log_file;
my $log_level = 'warn';

sub parse_network {
    my $arg = shift;
    $arg =~ /^(\d+\.\d+\.\d+\.\d+)(?:\/(\d+))?$/ or die "Bar network argument: $arg";
    $remote_network = $1;
    $remote_netmask = $2 if defined $2;
}

GetOptions( 'C|slirp-cmd|slirp-command=s' => \$slirp_command,
            's|ssh-cmd|ssh-command=s' => \$ssh_command,
            'R|remote-os=s' => \$remote_os,
            'S|remote-shell=s' => \$remote_shell,
            'n|remote-network=s' => sub { parse_network($_[1]) },
            'm|remote-netmask=s' => \$remote_netmask,
            'g|remote-gw=s' => \$remote_gw,
            'd|remote-dns=s' => \$remote_dns,
            'a|local-ip=s' => \$local_ip,
            'i|tap-device=s' => \$device,
            's|ssh-arg=s' => sub { push @more_ssh_args, $_[1] },
            'r|slirp-arg=s' => sub { push @more_slirp_args, $_[1] },
            'E|log-to-stderr' => \$log_to_stderr,
            'L|log-file=s' => \$log_file,
            'D|log-level=s' => \$log_level,
            'l|remote-user=s' => \$remote_user,
            'p|remote-port=s' => \$remote_port,
            'h|route-host|route-host-local=s' => sub { push @route_hosts_local, $_[1] },
            'H|route-host-dns=s' => sub { push @route_hosts_dns, $_[1] },
            'W|route-host-ssh=s' => sub { push @route_hosts_ssh, $_[1] } )
    or die "Usage: $0 [-c command] [-d] [-D arg] [-p remote_port] [target_address]\n";

my $remote_host = shift @ARGV // "localhost";

# Allow remote address to accept port in the format hostname:port
if ($remote_host =~ /^(.*?):(\d+)$/) {
    $remote_port = $2;
    $remote_host = $1;
}

$log_level =~ /^(debug|info|warn|error)$/ or die "Invalid log level: $log_level\n";

if (defined $device) {
    $device = "tap$device" if $device =~ /^\d+$/;
}

my $tunnel = App::SlirpTunnel->new(app_name => 'slirp-tunnel',
                                   remote_port => $remote_port,
                                   remote_host => $remote_host,
                                   remote_user => $remote_user,
                                   remote_os => $remote_os,
                                   remote_network => $remote_network,
                                   remote_netmask => $remote_netmask,
                                   remote_gw => $remote_gw,
                                   remote_dns => $remote_dns,
                                   local_ip => $local_ip,
                                   ssh_command => $ssh_command,
                                   more_ssh_args => \@more_ssh_args,
                                   more_slirp_args => \@more_slirp_args,
                                   slirp_command => $slirp_command,
                                   route_hosts_local => \@route_hosts_local,
                                   route_hosts_dns => \@route_hosts_dns,
                                   route_hosts_ssh => \@route_hosts_ssh,
                                   log_to_stderr => $log_to_stderr,
                                   log_file => $log_file,
                                   log_level => $log_level);

$tunnel->go;


#!/usr/bin/perl

use strict;
use warnings;
use Getopt::Long qw(GetOptions);
use App::SlirpTunnel;

my $remote_port;
my $remote_user;
my $remote_os;
my $remote_shell;
my $ssh_command;
my @more_ssh_args;
my $slirp_command;
my @more_slirp_args;

my $remote_network;
my $remote_netmask;
my $remote_dns = '3';
my $remote_gw = '2';
my $local_ip = '30';
my $device;
my @route_hosts_local;
my @route_hosts_dns;
my @route_hosts_ssh;
my $log_to_stderr;
my $log_file;
my $log_level = 'warn';
my $dont_close_stdio;
my $run_in_foreground;

sub parse_network {
    my $arg = shift;
    $arg =~ /^(\d+\.\d+\.\d+\.\d+)(?:\/(\d+))?$/ or die "Bar network argument: $arg";
    $remote_network = $1;
    $remote_netmask = $2 if defined $2;
}
GetOptions( 'C|slirp-cmd|slirp-command=s' => \$slirp_command,
            's|ssh-cmd|ssh-command=s' => \$ssh_command,
            'R|remote-os=s' => \$remote_os,
            'S|remote-shell=s' => \$remote_shell,
            'n|remote-network=s' => sub { parse_network($_[1]) },
            'm|remote-netmask=s' => \$remote_netmask,
            'g|remote-gw=s' => \$remote_gw,
            'd|remote-dns=s' => \$remote_dns,
            'a|local-ip=s' => \$local_ip,
            'i|tap-device=s' => \$device,
            's|ssh-arg=s' => sub { push @more_ssh_args, $_[1] },
            'r|slirp-arg=s' => sub { push @more_slirp_args, $_[1] },
            'E|log-to-stderr' => \$log_to_stderr,
            'L|log-file=s' => \$log_file,
            'D|log-level=s' => \$log_level,
            'l|remote-user=s' => \$remote_user,
            'p|remote-port=s' => \$remote_port,
            'h|route-host|route-host-local=s' => sub { push @route_hosts_local, $_[1] },
            'H|route-host-dns=s' => sub { push @route_hosts_dns, $_[1] },
            'W|route-host-ssh=s' => sub { push @route_hosts_ssh, $_[1] },
            'f|run-in-foreground' => \$run_in_foreground,
            'dont-close-stdio' => \$dont_close_stdio )
    or die "Usage: $0 [options]\n" .
            "Options:\n" .
            "  -C, --slirp-cmd, --slirp-command <command>    Specify the slirp command\n" .
            "  -s, --ssh-cmd, --ssh-command <command>        Specify the SSH command\n" .
            "  -R, --remote-os <os>                          Specify the remote operating system (autodetected by default)\n" .
            "  -S, --remote-shell <shell>                    Specify the remote shell (autodetected by default)\n" .
            "  -n, --remote-network <network>                Specify the remote network (defaults to 10.0.2.0/24)\n" .
            "  -m, --remote-netmask <netmask>                Specify the remote netmask (defaults to 255.255.255.0)\n" .
            "  -g, --remote-gw <gateway>                     Specify the remote gateway (defaults to 10.0.2.2)\n" .
            "  -d, --remote-dns <dns>                        Specify the remote DNS (defaults to 10.0.2.3)\n" .
            "  -a, --local-ip <ip>                           Specify the local IP (defaults to 10.0.2.30)\n" .
            "  -i, --tap-device <device>                     Specify the tap device (autodetected by default)\n" .
            "  -s, --ssh-arg <arg>                           Specify additional SSH arguments\n" .
            "  -r, --slirp-arg <arg>                         Specify additional slirp arguments\n" .
            "  -E, --log-to-stderr                           Log to standard error\n" .
            "  -L, --log-file <file>                         Specify the log file (by default logs to a file in ~/.local/state/slirp-tunnel/logs)\n" .
            "  -D, --log-level <level>                       Specify the log level\n" .
            "  -l, --remote-user <user>                      Specify the remote user\n" .
            "  -p, --remote-port <port>                      Specify the remote port (defaults to 22)\n" .
            "  -h, --route-host, --route-host-local <host>   Add route for host (resolve locally)\n" .
            "  -H, --route-host-dns <host>                   Add route for host (resolve using remote DNS)\n" .
            "  -W, --route-host-ssh <host>                   Add route for host (resolve using remote command run through SSH)\n" .
            "  -f, --run-in-foreground                       Run in foreground\n" .
            "  --dont-close-stdio                            Don't close stdio\n";
my $remote_host = shift @ARGV // "localhost";

# Allow remote address to accept port in the format hostname:port
if ($remote_host =~ /^(.*?):(\d+)$/) {
    $remote_port = $2;
    $remote_host = $1;
}

$log_level =~ /^(debug|info|warn|error)$/ or die "Invalid log level: $log_level\n";

if (defined $device) {
    $device = "tap$device" if $device =~ /^\d+$/;
}

my $tunnel = App::SlirpTunnel->new(app_name => 'slirp-tunnel',
                                   remote_port => $remote_port,
                                   remote_host => $remote_host,
                                   remote_user => $remote_user,
                                   remote_os => $remote_os,
                                   remote_network => $remote_network,
                                   remote_netmask => $remote_netmask,
                                   remote_gw => $remote_gw,
                                   remote_dns => $remote_dns,
                                   local_ip => $local_ip,
                                   ssh_command => $ssh_command,
                                   more_ssh_args => \@more_ssh_args,
                                   more_slirp_args => \@more_slirp_args,
                                   slirp_command => $slirp_command,
                                   route_hosts_local => \@route_hosts_local,
                                   route_hosts_dns => \@route_hosts_dns,
                                   route_hosts_ssh => \@route_hosts_ssh,
                                   log_to_stderr => $log_to_stderr,
                                   log_file => $log_file,
                                   log_level => $log_level,
                                   run_in_foreground => $run_in_foreground,
                                   dont_close_stdio => $dont_close_stdio,
                                   device => $device);

$tunnel->go;

